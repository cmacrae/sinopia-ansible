---
- include_vars: "{{ ansible_os_family }}.yml"

- name: Ensure NodeJS/npm are installed [Debian]
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - nodejs
    - npm
  when: ansible_os_family == 'Debian'

- name: Ensure NodeJS/npm are installed [EL]
  yum:
    name: "{{ item }}"
    state: present
  when: ansible_os_family == 'RedHat'
  with_items:
    - nodejs
    - npm

- name: Install sinopia
  npm:
    name: sinopia
    global: true
    version: "{{ sinopia_version }}"
    state: present

- name: Create sinopia group
  group:
    name: "{{ sinopia_group }}"
    state: present

- name: Create sinopia user
  user:
    name: "{{ sinopia_user }}"
    group: "{{ sinopia_group }}"
    system: true
    state: present

- name: Create config directory
  file:
    path: "{{ sinopia_config }}"
    owner: "{{ sinopia_user }}"
    group: "{{ sinopia_group }}"
    state: directory

- name: Create data directory
  file:
    path: "{{ sinopia_storage }}"
    owner: "{{ sinopia_user }}"
    group: "{{ sinopia_group }}"
    state: directory

- name: Copy configuration
  template:
    src: config.yaml.j2
    dest: "{{ sinopia_config }}/config.yaml"
    owner: "{{ sinopia_user }}"
    group: "{{ sinopia_group }}"
  notify: restart sinopia

- name: Copy NPM users
  template:
    src: users.j2
    dest: "{{ sinopia_config }}/users"
    owner: "{{ sinopia_user }}"
    group: "{{ sinopia_group }}"
  when: sinopia_manage_users

- name: Deploy Sinopia service manifest
  template:
    src: "{{ sinopia_service_manifest['src'] }}"
    dest: "{{ sinopia_service_manifest['dest'] }}"
  register: sinopia_service_manifest
  notify: restart sinopia

- name: Reload systemd service configuration [EL]
  shell: systemctl daemon-reload
  when: (sinopia_service_manifest['changed'])
        and (ansible_os_family == 'RedHat')

- name: Start Sinopia
  service:
    name: sinopia
    state: started
    enabled: true
